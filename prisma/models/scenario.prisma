/// ========================================
/// TRADING SCENARIO MODELS
/// ========================================

/// 매매 시나리오 메타 정보
/// 특정 종목(Symbol)에 대한 전략 구상과 트레이딩 아이디어의 방향성, 
/// 신뢰도, 작성 시점 등 주요 요소를 요약
/// EntryScenario / ExitScenario 등 세부 계획 테이블과 연결
model Scenario {
  id Int @id @default(autoincrement()) // 고유식별자
  journal_item_id Int // JournalItem 참조 (이 시나리오가 기록된 JournalItem)
  type ScenarioType // 시나리오 유형 (Entry: 진입, Exit: 청산)
  symbol_id Int // Symbol 참조 (해당 시나리오가 적용되는 종목)
  market_trend MarketTrendType // 시나리오 작성 시 인식된 시장 추세
  confidence_score ScoreType // 시나리오에 대한 자신감 점수
  validity_score ScoreType // 시나리오 자체의 주관적 평가 점수 (적합성 또는 타당성 기준)
  is_valid Boolean // 이 시나리오가 현재 유효한지 여부 (true: 유효)

  // Relations
  journal_item JournalItem @relation(fields: [journal_item_id], references: [id])
  symbol Symbol @relation(fields: [symbol_id], references: [id])
  
  // Sub-scenario relations
  entry_scenarios EntryScenario[]
  exit_scenarios ExitScenario[]
  
  // ScenarioTradingStrategy relations
  scenario_trading_strategies ScenarioTradingStrategy[]

  @@index([journal_item_id])
  @@index([symbol_id])
  @@index([type])
}

/// 진입 시나리오 세부 계획
/// 포지션 진입 시 고려한 전략, 가격 조건, 기대 손익비 등을 구체적으로 기록
/// 사전 계획을 통한 감정적 거래 방지 및 체계적인 진입 관리
model EntryScenario {
  id Int @id @default(autoincrement()) // 고유식별자
  scenario_id Int // Scenario 참조 (상위 시나리오)
  trading_id Int // Trading 참조 (해당 매매 대상)
  strategy_bias_type StrategyBiasType // 사용 전략 유형 (FollowTrend / CounterTrend)
  time_frame TradeTimeFrameType // 전략 적용 시간 프레임 (Scalp ~ Investment)
  target_entry_price String // 목표 진입 가격 - 부동소수점 오차 방지를 위해 문자열로 저장
  max_stop_loss_price String // 허용 가능한 최대 손절 가격 - 부동소수점 오차 방지를 위해 문자열로 저장
  min_take_profit_price String // 기대 최소 익절 가격 - 부동소수점 오차 방지를 위해 문자열로 저장
  first_take_profit_weight Float // 첫 익절 비중 (0.0 ~ 1.0) - 비율이므로 Float 사용
  min_risk_reward_weight Float // 기대 최소 손익비 (예: 2.0이면 수익 2 / 손실 1) - 비율이므로 Float 사용
  max_invalidation_price String // 관점 폐기 기준의 상단 가격 - 부동소수점 오차 방지를 위해 문자열로 저장
  min_invalidation_price String // 관점 폐기 기준의 하단 가격 - 부동소수점 오차 방지를 위해 문자열로 저장

  // Relations
  scenario Scenario @relation(fields: [scenario_id], references: [id])
  trading Trading @relation(fields: [trading_id], references: [id])

  @@index([scenario_id])
  @@index([trading_id])
}

/// 청산 시나리오 세부 계획
/// 포지션 청산 조건을 정의하여 손절 및 익절 기준 가격과 해당 비중을 사전에 계획
/// 트레이딩 감정 개입을 방지하고 체계적인 청산 관리
model ExitScenario {
  id Int @id @default(autoincrement()) // 고유식별자
  scenario_id Int // Scenario 참조 (상위 시나리오)
  trading_id Int // Trading 참조 (해당 포지션)
  stop_loss_price String // 손절 기준 가격 (도달 시 일부 또는 전체 청산) - 부동소수점 오차 방지를 위해 문자열로 저장
  stop_loss_weight Float // 손절 비중 (0.0 ~ 1.0) - 비율이므로 Float 사용
  take_profit_price String // 익절 기준 가격 (도달 시 일부 또는 전체 청산) - 부동소수점 오차 방지를 위해 문자열로 저장
  take_profit_weight Float // 익절 비중 (0.0 ~ 1.0) - 비율이므로 Float 사용

  // Relations
  scenario Scenario @relation(fields: [scenario_id], references: [id])
  trading Trading @relation(fields: [trading_id], references: [id])

  @@index([scenario_id])
  @@index([trading_id])
}

/// 시나리오-전략 연결 테이블
/// 시나리오 설계 시 참조된 복수의 TradingStrategy와의 연결
/// 하나의 시나리오가 여러 전략 기반으로 구성될 수 있는 구조를 표현
model ScenarioTradingStrategy {
  id Int @id @default(autoincrement()) // 고유식별자
  scenario_id Int // Scenario 참조 (전략이 적용된 시나리오)
  trading_strategy_id Int // TradingStrategy 참조 (참조된 전략 상황)
  created_at DateTime @default(now()) // 연결이 생성된 시각
  deleted_at DateTime? // Soft delete 시각 (null이면 활성 상태)

  // Relations
  scenario Scenario @relation(fields: [scenario_id], references: [id])
  trading_strategy TradingStrategy @relation(fields: [trading_strategy_id], references: [id])

  @@index([scenario_id])
  @@index([trading_strategy_id])
  @@index([created_at])
  @@index([deleted_at])
}